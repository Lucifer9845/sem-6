//prog1
#include <GL/glut.h>
#include <stdio.h>
int x1, y1, x2, y2;

void myInit()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 500, 0, 500);
}

void draw_pixel(int x, int y)
{
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void draw_line(int x1, int x2, int y1, int y2)
{
    int dx, dy, i, e, x, y, incx, incy, inc1, inc2;
    dx = x2-x1;
    dy = y2-y1;
    if (dx < 0)
        dx = -dx;
    if (dy < 0)
        dy = -dy;
    
    incx = 1;
    if (x2 < x1)
        incx = -1;
    
    incy = 1;
    if (y2 < y1)
        incy = -1;
    
    x = x1; y = y1;

    if (dx > dy) 
    {
        draw_pixel(x, y);
        e = 2 * dy-dx;
        inc1 = 2*(dy-dx);
        inc2 = 2*dy;
        for (i=0; i<dx; i++) 
        {
            if (e >= 0) 
            {
                y += incy;
                e += inc1;
            }
            else
                e += inc2;
            x += incx;
            draw_pixel(x, y);
        }
    }
    else
    {
        draw_pixel(x, y);
        e = 2*dx-dy;
        inc1 = 2*(dx-dy);
        inc2 = 2*dx;
        for (i=0; i<dy; i++)
        {
            if (e >= 0)
            {
                x += incx;
                e += inc1;
            }
            else
                e += inc2;
            y += incy;
            draw_pixel(x, y);
        }
    }
}

void myDisplay() 
{
    draw_line(x1, x2, y1, y2);
    glFlush();
}

int main(int argc, char **argv)
{
    printf( "Enter (x1, y1, x2, y2)\n");
    scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("Bresenham's Line Drawing");
    myInit();
    glutDisplayFunc(myDisplay);
    glutMainLoop();
    return 0;
}

//prog2
#include<stdio.h>
#include<GL/glut.h>

int ch;
int angle, xf = 50.0, yf = 60.0;

void triangle()
{
	glBegin(GL_TRIANGLES);
	glVertex2i(250, 250);
	glVertex2i(400, 250);
	glVertex2i(325, 270);
	glEnd();
	glFlush();
}

void rotate()
{
	int n;
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1.0, 0.0, 0.0);
	glClearColor(0.0, 0.0, 0.0, 1.0);
	printf("\n Enter choice \n");
	scanf("%d", &n);
	
	switch(n)
	{
		case 1: printf("\n Enter the angle \n");
				scanf("%d", &angle);
				triangle();
				glRotatef(angle, 0, 0, 1);
				triangle();
				break;
		case 2:  printf("\n Enter the angle \n");
				scanf("%d", &angle);
				triangle();
				glTranslatef(xf, yf, 0);
				glRotatef(angle, 0, 0, 1);
				glTranslatef(-xf, -yf, 0);
				triangle();
				break;
	}
}

int main(int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1000, 500);
	glutCreateWindow("rotate");
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(0, 800, 0, 500);
	glutDisplayFunc(rotate);
	glutMainLoop();
}

//prog3
#include<stdio.h>
#include<math.h>
#include<iostream>
#include<GL/glut.h>

float v[][3] = { { -1,-1,-1 } ,{ -1,1,-1 } ,{ 1,1,-1 } ,{ 1,-1,-1 } ,{ -1,-1,1 } ,{ -1,1,1 } ,{ 1,1,1 } ,{ 1,-1,1 } }; 
int t[] = { 0,0,0 };  
int ax = 2;

void init()
{
    glMatrixMode(GL_PROJECTION);
    glOrtho(-4, 4, -4, 4, -10, 10);
    glMatrixMode(GL_MODELVIEW);  
}

void polygon(int a, int b, int c, int d)  
{
    glBegin(GL_POLYGON);    
    glVertex3fv(v[a]);       
    glVertex3fv(v[b]);        
    glVertex3fv(v[c]);
    glVertex3fv(v[d]);
    glEnd();
}

void colorcube()       
{
    glColor3f(0, 0, 1);        
    polygon(0, 1, 2, 3);    
    glColor3f(0, 1, 1);        
    polygon(4, 5, 6, 7);    
    glColor3f(0, 1, 0);       
    polygon(0, 1, 5, 4);   
    glColor3f(1, 0, 0);        
    polygon(2, 6, 7, 3);    
    glColor3f(1, 1, 0);        
    polygon(0, 4, 7, 3);    
    glColor3f(1, 0, 1);     
    polygon(1, 5, 6, 2);  
}

void spincube()
{
    t[ax] += 1;    
    if (t[ax] == 360)
        t[ax] -= 360;    
    glutPostRedisplay();    
}

void mouse(int btn, int state, int x, int y)  
{
    if (btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN)   
        ax = 0;                                           
    if (btn == GLUT_MIDDLE_BUTTON && state == GLUT_DOWN)
        ax = 1;                                            
    if (btn == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
        ax = 2;                                            
}

void display()    // display function
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
    glClearColor(1, 1, 1, 1);    
    glLoadIdentity();    
    glRotatef(t[0], 1, 0, 0);    
    glRotatef(t[1], 0, 1, 0);   
    glRotatef(t[2], 0, 0, 1);    
    colorcube();    
    glutSwapBuffers();
    glFlush();
}

int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH); 
    glutInitWindowPosition(100, 100); 
    glutInitWindowSize(500, 500);    
    glutCreateWindow("Cube rotation");
    init();
    glutIdleFunc(spincube);
    glutMouseFunc(mouse);    
    glEnable(GL_DEPTH_TEST);    
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}

//prog4
#include<stdio.h>
#include<math.h>
#include<iostream>
#include<GL/glut.h>
using namespace std;

float pts[8][3] = {{-1,-1,-1},{-1,1,-1},{1,1,-1},{1,-1,-1},{-1,-1,1},{-1,1,1},{1,1,1},{1,-1,1}};
float theta[] ={0,0,0};
int axis = 2;
float viewer[]={5,0,0};

void myInit()
{
    glMatrixMode(GL_PROJECTION);
    glFrustum(-2,2,-2,2,2,10);
    glMatrixMode(GL_MODELVIEW);
}

void draw_polygon(int a, int b, int c, int d)
{
    glBegin(GL_QUADS);
    glVertex3fv(pts[a]);
    glVertex3fv(pts[b]);
    glVertex3fv(pts[c]);
    glVertex3fv(pts[d]);
    glEnd();
}

void draw_cube(float pts[8][3])
{
    glColor3f(0,0,1);
    draw_polygon(0,1,2,3); //front face
    glColor3f(0,1,0);
    draw_polygon(4,5,6,7);    //behind face
    glColor3f(1,0,0);
    draw_polygon(0,1,5,4);    //left face
    glColor3f(0,0,0);
    draw_polygon(3,2,6,7);    //right face
    glColor3f(0,1,1);
    draw_polygon(0,4,7,3);    //bottom face
    glColor3f(1,0,1);
    draw_polygon(1,5,6,2);    //top face
}

void myDisplay()
{
    glClearColor(1,1,1,1);
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    gluLookAt(viewer[0],viewer[1],viewer[2],0,0,0,0,1,0);
    glRotatef(theta[2],0,0,1);
    glRotatef(theta[1],0,1,0);
    glRotatef(theta[0],1,0,0);
    draw_cube(pts);
    glFlush();
    glutSwapBuffers();
}

void spincube()
{
    theta[axis] = theta[axis]+4;
    if(theta[axis]>360)
        theta[axis]=0;
    glutPostRedisplay();
}

void mouse(int btn , int state , int x , int y)
{
    if((btn==GLUT_LEFT_BUTTON)&&(state==GLUT_DOWN))
        axis=0;
    if((btn==GLUT_RIGHT_BUTTON)&&(state==GLUT_DOWN))
        axis=2;
    if((btn==GLUT_MIDDLE_BUTTON)&&(state==GLUT_DOWN))
        axis=1;
    spincube();
}

void keyboard(unsigned char key, int x, int y)
{
    if(key=='X') viewer[0]+=1;
    if(key=='x') viewer[0]-=1;
    if(key=='Y') viewer[1]+=1;
    if(key=='y') viewer[1]-=1;
    if(key=='Z') viewer[2]+=1;
    if(key=='z') viewer[2]-=1;
    glutPostRedisplay();
}

int main (int argc, char ** argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode( GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH);
    glutInitWindowPosition(50,50);
    glutInitWindowSize(500,500);
    glutCreateWindow("Positioning of Camera");
    myInit();
    glEnable(GL_DEPTH_TEST);
    glutDisplayFunc(myDisplay);
    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);
    glutMainLoop();
}

//prog5
#include<stdio.h>
#include<GL/glut.h>

#define true 1;
#define false 0;
#define bool int;
double x,y;
int xmin=50,xmax=100,ymin=50,ymax=100;
const int RIGHT=8,LEFT=2,TOP=4,BOTTOM=1;
int outcode0,outcode1,outcodeout,done,accept;

int computeoutcode(double x,double y)
{
  int code=0;
  if(y>ymax)
    code|=TOP;
  else if(y<ymin)
    code|=BOTTOM;
  if(x>xmax)
    code|=RIGHT;
  else if(x<xmin)
    code|=LEFT;
  return code;
}


void LineClip(double x0,double y0,double x1,double y1)
{
  int accept=false;
  int done=false;
  outcode0=computeoutcode(x0,y0);
  outcode1=computeoutcode(x1,y1);
  do{
    if(!(outcode0|outcode1))
    {
      accept=true;
      done=true;
    }
    else if(outcode0&outcode1)
    {
      done=true;
    }
    else
    {
      outcodeout=outcode0?outcode0:outcode1;
      if(outcodeout & TOP)
      {
        x=x0+(x1-x0)*(ymax-y0)/(y1-y0);
        y=ymax;
      }
      else if(outcodeout & BOTTOM)
      {
        x=x0+(x1-x0)*(ymin-y0)/(y1-y0);
        y=ymin;
      }
      else if(outcodeout & RIGHT)
      {
        y=y0+(y1-y0)*(xmax-x0)/(x1-x0);
        x=xmax;
      }
      else
      {
        y=y0+(y1-y0)*(xmin-x0)/(x1-x0);
        x=xmin;
      }
      if(outcodeout==outcode0)
      {
        x0=x;y0=y;outcode0=computeoutcode(x0,y0);
      }
      else
      {
        x1=x;y1=y;outcode1=computeoutcode(x1,y1);
      }
    }
  }while(!done);
  if(accept)
  {
    glPushMatrix();
    glTranslatef(100,100,0);
    glColor3f(1.0,0.0,0.0);
    glBegin(GL_LINE_LOOP);
    glVertex2i(50,50);
    glVertex2i(100,50);
    glVertex2i(100,100);
    glVertex2i(50,100);
    glEnd();
    glColor3f(1.0,0.0,1.0);
    glBegin(GL_LINES);
    glVertex2i(x0,y0);
    glVertex2i(x1,y1);
    glEnd();
    glPopMatrix();
    glFlush();
  }
}

void display()
{
  glClearColor(1,1,1,1);
  glClear(GL_COLOR_BUFFER_BIT);
  glColor3f(1.0,0.0,0.0);
  glBegin(GL_LINE_LOOP);
  glVertex2i(50,50);
  glVertex2i(100,50);
  glVertex2i(100,100);
  glVertex2i(50,100);
  glEnd();
  glColor3f(1.0,0.0,1.0);
  glBegin(GL_LINES);
  glVertex2i(60,20);
  glVertex2i(80,120);
 // glVertex2i(80,20);
  //glVertex2i(60,120);
  glEnd();
  LineClip(60,20,80,120);
  //LineClip(80,20,60,120);
  glFlush();
}

void init()
{
  glMatrixMode(GL_PROJECTION);
  gluOrtho2D(0,300,0,300);
  glMatrixMode(GL_MODELVIEW);
}

int main(int argc,char** argv)
{
  glutInit(&argc,argv);
  glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
  glutInitWindowPosition(0,0);
  glutInitWindowSize(500,500);
  glutCreateWindow("Cohen Sutherland line and drawing algorithm");
  init();
  glutDisplayFunc(display);
  glutMainLoop();
}


//prog6
#include<GL/glut.h>

void obj(double tx,double ty,double tz,double sx,double sy,double sz)
{
    glRotated(50,0,1,0);
    glRotated(10,-1,0,0);
    glRotated(11.7,0,0,-1);
    glTranslated(tx,ty,tz);
    glScaled(sx,sy,sz);
    glutSolidCube(1);
    glLoadIdentity();
}

void display()
{
    glViewport(0,0,700,700);
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    obj(0,0,0.5,1,1,0.04);
    obj(0,-0.5,0,1,0.04,1);
    obj(-0.5,0,0,0.04,1,1);
    obj(0,-0.3,0,0.02,0.2,0.02);
    obj(0,-0.3,-0.4,0.02,0.2,0.02);
    obj(0.4,-0.3,0,0.02,0.2,0.02);
    obj(0.4,-0.3,-0.4,0.02,0.2,0.02);
    obj(0.2,-0.2,-0.2,0.6,0.02,0.6);
    glRotated(50,0,1,0);
    glRotated(10,-1,0,0);
    glRotated(11.7,0,0,-1);
    glTranslated(0.3,-0.1,-0.3);
    glutSolidTeapot(0.09);
    glFlush();
    glLoadIdentity();
}

int main(int argc,char **argv)
{
    glutInit(&argc,argv);
    float ambient[]={1,1,1,1};
    float light_pos[]={27,80,2,3};
    glutInitWindowSize(700,700);
    glutCreateWindow("Tea Pot");
    glutDisplayFunc(display);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glMaterialfv(GL_FRONT,GL_AMBIENT,ambient);
    glLightfv(GL_LIGHT0,GL_POSITION,light_pos);
    glEnable(GL_DEPTH_TEST);
    glutMainLoop();
}

//prog7
#include <stdlib.h>
#include <stdio.h>
#include <GL/glut.h>

typedef float point[3];
point v[]={ {0.0, 0.0, 1.0},
            {0.0, 0.94, -0.33}, 
            {-0.81, -0.471, -0.33},
            {0.81, -0.47, -0.33}};
static GLfloat theta[] = {0.0,0.0,0.0};
int n;

void triangle( point a, point b, point c)
{
    glBegin(GL_POLYGON);
    glVertex3fv(a);
    glVertex3fv(b);
    glVertex3fv(c);
    glEnd();
}

void divide_triangle(point a, point b, point c, int m)
{
    point v1, v2, v3;
    int j;
    if(m>0)
    {
        for(j=0; j<3; j++)
        {
            v1[j]=(a[j]+b[j])/2;
            v2[j]=(a[j]+c[j])/2;
            v3[j]=(b[j]+c[j])/2;
        }
        divide_triangle(a, v1, v2, m-1);
        divide_triangle(c, v2, v3, m-1);
        divide_triangle(b, v3, v1, m-1);
    }
    else(triangle(a,b,c));
}

void tetrahedron( int m)
{
    glColor3f(1.0,0.0,0.0);
    divide_triangle(v[0], v[1], v[2], m);
    glColor3f(0.0,1.0,0.0);
    divide_triangle(v[3], v[2], v[1], m);
    glColor3f(0.0,0.0,1.0);
    divide_triangle(v[0], v[3], v[1], m);
    glColor3f(0.0,0.0,0.0);
    divide_triangle(v[0], v[2], v[3], m);
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    tetrahedron(n);
    glFlush();
}


void myReshape(int w, int h)
{
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (w <= h)
        glOrtho(-2.0, 2.0, -2.0 * (GLfloat) h / (GLfloat) w, 2.0 * (GLfloat) h / (GLfloat) w, -10.0, 10.0);
    else
        glOrtho(-2.0 * (GLfloat) w / (GLfloat) h, 2.0 * (GLfloat) w / (GLfloat) h, -2.0, 2.0, -10.0, 10.0);
    glMatrixMode(GL_MODELVIEW);
    glutPostRedisplay();
}


int main(int argc, char **argv)
{
    printf(" No. of Divisions ? ");
    scanf("%d",&n);
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500, 500);
    glutCreateWindow("3D Gasket");
    glutReshapeFunc(myReshape);
    glutDisplayFunc(display);
    glEnable(GL_DEPTH_TEST);
    glClearColor (1.0, 1.0, 1.0, 1.0);
    glutMainLoop();
    return 0;
}

//prog8
#include<GL/glut.h>
#include<stdio.h>
#include<math.h>
#define PI 3.1416
static int win,val=0,CMenu;
void CreateMenu(void);
void Menu(int value);
struct wcPt3D
{
GLfloat x, y, z;
};
GLsizei winWidth = 600, winHeight = 600;
GLfloat xwcMin = 0.0, xwcMax = 130.0;
GLfloat ywcMin = 0.0, ywcMax = 130.0;
void bino(GLint n, GLint *C)
{
GLint k, j;
for(k=0;k<=n;k++)
{
C[k]=1;
for(j=n;j>=k+1; j--)
C[k]*=j;
for(j=n-k;j>=2;j--)
C[k]/=j;
}
}
void computeBezPt(GLfloat u,struct wcPt3D *bezPt, GLint nCtrlPts,struct wcPt3D *ctrlPts,
GLint *C)
{
GLint k, n=nCtrlPts-1;
GLfloat bezBlendFcn;
bezPt ->x =bezPt ->y = bezPt->z=0.0;
for(k=0; k< nCtrlPts; k++)
{
bezBlendFcn = C[k] * pow(u, k) * pow( 1-u, n-k);
bezPt ->x += ctrlPts[k].x * bezBlendFcn;
bezPt ->y += ctrlPts[k].y * bezBlendFcn;
bezPt ->z += ctrlPts[k].z * bezBlendFcn;
}
}
void bezier(struct wcPt3D *ctrlPts, GLint nCtrlPts, GLint nBezCurvePts)
{
struct wcPt3D bezCurvePt;
GLfloat u;
GLint *C, k;
C= new GLint[nCtrlPts];
bino(nCtrlPts-1, C);
glBegin(GL_LINE_STRIP);
for(k=0; k<=nBezCurvePts; k++)
{
u=GLfloat(k)/GLfloat(nBezCurvePts);
computeBezPt(u, &bezCurvePt, nCtrlPts, ctrlPts, C);
glVertex2f(bezCurvePt.x, bezCurvePt.y);
}
glEnd();
delete[]C;
}
void displayFcn()
{
GLint nCtrlPts = 4, nBezCurvePts =20;
static float theta = 0;
struct wcPt3D ctrlPts[4] = {{20, 100, 0},{30, 110, 0},{50, 90, 0},{60, 100, 0}};
ctrlPts[1].x +=10*sin(theta * PI/180.0);
ctrlPts[1].y +=5*sin(theta * PI/180.0);
ctrlPts[2].x -= 10*sin((theta+30) * PI/180.0);
ctrlPts[2].y -= 10*sin((theta+30) * PI/180.0);
ctrlPts[3].x-= 4*sin((theta) * PI/180.0);
ctrlPts[3].y += sin((theta-30) * PI/180.0);
theta+=0.1;
glClear(GL_COLOR_BUFFER_BIT);
glColor3f(1.0, 1.0, 1.0);
glPointSize(5);
//Indian Flag
if(val==1){
glPushMatrix();
glLineWidth(5);
glColor3f(1.0,0.5,0); //Indian flag: Orange color code
for(int i=0;i<8;i++)
{
glTranslatef(0, -0.8, 0);
bezier(ctrlPts, nCtrlPts, nBezCurvePts);
}
glColor3f(1,1,1); //Indian flag: white color code
for(int i=0;i<8;i++)
{
glTranslatef(0, -0.8, 0);
bezier(ctrlPts, nCtrlPts, nBezCurvePts);
}
glColor3f(0,1.0,0); //Indian flag: green color code
for(int i=0;i<8;i++)
{
glTranslatef(0, -0.8, 0);
bezier(ctrlPts, nCtrlPts, nBezCurvePts);
}
glPopMatrix();
glColor3f(0.7, 0.5,0.3);
glLineWidth(5);
glBegin(GL_LINES);
glVertex2f(20,100);
glVertex2f(20,40);
glEnd();
glFlush();
}
//Karnataka Flag
if(val==2){
glPushMatrix();
glLineWidth(5);
glColor3f(1.0, 1.0, 0.0); //Karnataka flag: Yellow color code
for(int i=0;i<12;i++)
{
glTranslatef(0, -0.8, 0);
bezier(ctrlPts, nCtrlPts, nBezCurvePts);
}
glColor3f(1, 0.0, 0.0); //Karnataka flag: Red color code
for(int i=0;i<12;i++)
{
glTranslatef(0, -0.8, 0);
bezier(ctrlPts, nCtrlPts, nBezCurvePts);
}
glPopMatrix();
glColor3f(0.7, 0.5,0.3);
glLineWidth(5);
glBegin(GL_LINES);
glVertex2f(20,100);
glVertex2f(20,40);
glEnd();
glFlush();
}
glutPostRedisplay();
glutSwapBuffers();
}
void winReshapeFun(GLint newWidth, GLint newHeight)
{
glViewport(0, 0, newWidth, newHeight);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(xwcMin, xwcMax, ywcMin, ywcMax);
glClear(GL_COLOR_BUFFER_BIT);
}
void CreateMenu(void)
{
CMenu= glutCreateMenu(Menu);//Creaate Menu Option
glutAddMenuEntry("Indian Flag",1);
glutAddMenuEntry("Karnataka Flag",2);
glutAddMenuEntry("Exit",0);
glutAttachMenu(GLUT_RIGHT_BUTTON);
}
void Menu(int value)
{
if(value==0)
{
glutDestroyWindow(win);
exit(0);
}
else {
val=value;
}
}
int main(int argc, char **argv)
{
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
glutInitWindowPosition(50, 50);
glutInitWindowSize(winWidth, winHeight);
glutCreateWindow("Prg. 8 Bezier Curve");
CreateMenu();
glutDisplayFunc(displayFcn);
glutReshapeFunc(winReshapeFun);
glutMainLoop();
}

//prog9
#include <stdlib.h>
#include <stdio.h>
#include <GL/glut.h>
float x1,x2,x3,x4,y1,y2,y3,y4;

void edgedetect(float x1,float y1,float x2,float y2,int *le,int *re)
{
    float mx,x,temp;
    int i;
    if((y2-y1)<0)
    {
        temp=y1;y1=y2;y2=temp;
        temp=x1;x1=x2;x2=temp;
    }
    if((y2-y1)!=0)
        mx=(x2-x1)/(y2-y1);
    else
        mx=x2-x1;
        x=x1;
    for(i=y1;i<=y2;i++)
    {
        if(x<(float)le[i])
            le[i]=(int)x;
        if(x>(float)re[i])
            re[i]=(int)x;
        x+=mx;
    }
}

void draw_pixel(int x,int y)
{
    glColor3f(1.0,0.3,0.7);
    glBegin(GL_POINTS);
    glVertex2i(x,y);
    glEnd();
}

void scanfill(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4)
{
    int le[500],re[500];
    int i,y;
    for(i=0;i<500;i++)
    {
        le[i]=500;
        re[i]=0;
    }
    edgedetect(x1,y1,x2,y2,le,re);
    edgedetect(x2,y2,x3,y3,le,re);
    edgedetect(x3,y3,x4,y4,le,re);
    edgedetect(x4,y4,x1,y1,le,re);
    for(y=0;y<500;y++)
    {
        if(le[y]<=re[y])
            for(i=(int)le[y];i<(int)re[y];i++)
                draw_pixel(i,y);
    }
}

void display()
{
    x1=200.0;y1=200.0;x2=100.0;y2=300.0;x3=200.0;y3=400.0;x4=300.0;y4=300.0;
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 0.0, 1.0);
    glBegin(GL_LINE_LOOP);
        glVertex2f(x1,y1);
        glVertex2f(x2,y2);
        glVertex2f(x3,y3);
        glVertex2f(x4,y4);
    glEnd();
    scanfill(x1,y1,x2,y2,x3,y3,x4,y4);
    glFlush();
}

void myinit()
{
    glClearColor(1.0,1.0,1.0,1.0);
    glColor3f(1.0,0.0,0.0);
    glPointSize(1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0,499.0,0.0,499.0);
}

int main(int argc, char** argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowSize(500,500);
    glutInitWindowPosition(0,0);
    glutCreateWindow("Filling a Polygon using Scan-line Algorithm");
    glutDisplayFunc(display);
    myinit();
    glutMainLoop();
}
